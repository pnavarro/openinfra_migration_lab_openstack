---
# Data Plane Configuration role - Based on create-dp.adoc documentation

- name: Apply data plane network configuration
  kubernetes.core.k8s:
    state: present
    src: "{{ ansible_env.HOME }}/{{ files_directory }}/osp-ng-dataplane-netconfig.yaml"

- name: Set hostname for compute node via SSH
  shell: |
    ssh -i /home/{{ bastion_user }}/.ssh/{{ guid }}key.pem -o StrictHostKeyChecking=no cloud-user@{{ compute_hostname }} "sudo hostnamectl set-hostname {{ compute_nodes[0].hostname }}"
  register: hostname_result
  changed_when: true

- name: Configure static eth1 interface for control plane via SSH
  shell: |
    ssh -i /home/{{ bastion_user }}/.ssh/{{ guid }}key.pem -o StrictHostKeyChecking=no cloud-user@{{ compute_hostname }} "sudo nmcli con add con-name 'static-eth1' ifname eth1 type ethernet ip4 {{ compute_nodes[0].ctlplane_ip }}/24 ipv4.dns '172.22.0.89'"
  register: eth1_config_result
  changed_when: true

- name: Activate static-eth1 connection via SSH
  shell: |
    ssh -i /home/{{ bastion_user }}/.ssh/{{ guid }}key.pem -o StrictHostKeyChecking=no cloud-user@{{ compute_hostname }} "sudo nmcli con up 'static-eth1'"
  register: eth1_activate_result
  changed_when: true

- name: Configure eth0 DHCP connection via SSH
  shell: |
    ssh -i /home/{{ bastion_user }}/.ssh/{{ guid }}key.pem -o StrictHostKeyChecking=no cloud-user@{{ compute_hostname }} "sudo nmcli con add type ethernet ifname eth0 con-name eth0-dhcp ipv4.method auto ipv6.method ignore"
  register: eth0_config_result
  changed_when: true

- name: Activate eth0-dhcp connection via SSH
  shell: |
    ssh -i /home/{{ bastion_user }}/.ssh/{{ guid }}key.pem -o StrictHostKeyChecking=no cloud-user@{{ compute_hostname }} "sudo nmcli con up eth0-dhcp"
  register: eth0_activate_result
  changed_when: true

- name: Set stable ID for eth0 connection via SSH
  shell: |
    ssh -i /home/{{ bastion_user }}/.ssh/{{ guid }}key.pem -o StrictHostKeyChecking=no cloud-user@{{ compute_hostname }} "sudo nmcli con mod eth0-dhcp connection.stable-id 'user-set'"
  register: eth0_stable_result
  changed_when: true

- name: Create dataplane ansible SSH key secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: dataplane-ansible-ssh-private-key-secret
        namespace: "{{ openstack_namespace }}"
      type: Opaque
      data:
        authorized_keys: "{{ lookup('file', ansible_env.HOME + '/.ssh/' + guid + 'key.pub') | b64encode }}"
        ssh-privatekey: "{{ lookup('file', ansible_env.HOME + '/.ssh/' + guid + 'key.pem') | b64encode }}"
        ssh-publickey: "{{ lookup('file', ansible_env.HOME + '/.ssh/' + guid + 'key.pub') | b64encode }}"

- name: Generate nova migration SSH key pair
  community.crypto.openssh_keypair:
    path: "{{ ansible_env.HOME }}/nova-migration-key"
    type: ecdsa
    size: 521
    force: false

- name: Create nova migration SSH key secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: nova-migration-ssh-key
        namespace: "{{ openstack_namespace }}"
      type: Opaque
      data:
        ssh-privatekey: "{{ lookup('file', ansible_env.HOME + '/nova-migration-key') | b64encode }}"
        ssh-publickey: "{{ lookup('file', ansible_env.HOME + '/nova-migration-key.pub') | b64encode }}"

- name: Create subscription manager secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: subscription-manager
        namespace: "{{ openstack_namespace }}"
      type: Opaque
      stringData:
        rhc_auth: '{"login": {"username": "{{ subscription_manager_username }}", "password": "{{ subscription_manager_password }}"}}'
  when: 
    - subscription_manager_username != ""
    - subscription_manager_password != ""

- name: Create Red Hat registry secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: redhat-registry
        namespace: "{{ openstack_namespace }}"
      type: Opaque
      stringData:
        edpm_container_registry_logins: '{"registry.redhat.io": {"{{ redhat_registry_username }}": "{{ redhat_registry_password }}"}}'
  when:
    - redhat_registry_username != ""
    - redhat_registry_password != ""

- name: Wait for OpenStack DataPlane CRDs to be available
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: "{{ item }}"
  register: dataplane_crd
  until: dataplane_crd.resources | length > 0
  retries: 30
  delay: 10
  loop:
    - openstackdataplanenodesets.dataplane.openstack.org
    - openstackdataplanedeployments.dataplane.openstack.org

- name: Apply data plane node set deployment
  kubernetes.core.k8s:
    state: present
    src: "{{ ansible_env.HOME }}/{{ files_directory }}/osp-ng-dataplane-node-set-deploy.yaml"
  retries: 5
  delay: 10

- name: Apply data plane deployment
  kubernetes.core.k8s:
    state: present
    src: "{{ ansible_env.HOME }}/{{ files_directory }}/osp-ng-dataplane-deployment.yaml"
  retries: 5
  delay: 10

- name: Wait for data plane deployment to complete
  kubernetes.core.k8s_info:
    api_version: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneDeployment
    namespace: "{{ openstack_namespace }}"
  register: dataplane_deployment
  until: >
    dataplane_deployment.resources | length > 0 and
    dataplane_deployment.resources[0].status is defined and
    dataplane_deployment.resources[0].status.conditions is defined and
    dataplane_deployment.resources[0].status.conditions |
    selectattr('type', 'equalto', 'Ready') |
    selectattr('status', 'equalto', 'True') |
    list | length > 0
  retries: 180  # 30 minutes timeout
  delay: 10

- name: Wait for data plane node set to be ready
  kubernetes.core.k8s_info:
    api_version: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneNodeSet
    namespace: "{{ openstack_namespace }}"
  register: dataplane_nodeset
  until: >
    dataplane_nodeset.resources | length > 0 and
    dataplane_nodeset.resources[0].status is defined and
    dataplane_nodeset.resources[0].status.conditions is defined and
    dataplane_nodeset.resources[0].status.conditions |
    selectattr('type', 'equalto', 'Ready') |
    selectattr('status', 'equalto', 'True') |
    list | length > 0
  retries: 180  # 30 minutes timeout
  delay: 10

- name: Display data plane status
  debug:
    msg:
      - "Data plane deployment ready: {{ dataplane_deployment.resources[0].status.conditions | selectattr('type', 'equalto', 'Ready') | map(attribute='status') | first | default('Unknown') }}"
      - "Data plane node set ready: {{ dataplane_nodeset.resources[0].status.conditions | selectattr('type', 'equalto', 'Ready') | map(attribute='status') | first | default('Unknown') }}"
